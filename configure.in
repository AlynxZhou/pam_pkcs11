# $Id$

# Require autoconf 2.52
AC_PREREQ(2.52)

# Process this file with autoconf to produce a configure script.
AC_INIT(pam_pkcs11,"WIP")
AC_CONFIG_SRCDIR([src/pam_pkcs11/pam_pkcs11.c])
AC_CANONICAL_TARGET([])
AM_INIT_AUTOMAKE(pam_pkcs11, "WIP")
AC_CONFIG_HEADERS([config.h])

AM_MAINTAINER_MODE

# Add argument for debuging
AC_ARG_ENABLE(debug, 
  [  --enable-debug          add debugging code (default=yes)])
if test "$enable_debug" = "no" -o "$enable_debug" = "false"
then
  AC_MSG_WARN([Debugging support is completely disabled!])
else
  AC_DEFINE(DEBUG, 1, [Define to 1 if you want to include debugging code.])
fi

# Add argument for using curl
AC_ARG_WITH(curl,
  [  --with-curl             use curl (default=no)])
if test "$with_curl" = "yes" -o "$with_curl" = "true"
then
  AC_DEFINE(USE_CURL, 1, [Define to 1 if you want to use curl.])
  USE_CURL=1
fi

dnl Check for SGML processor
AC_ARG_WITH(docbook,
[  --without-docbook       do no generate html manual (needs docbook)],
        with_docbook=$withval)
AC_CHECK_PROG(XSLTPROC, xsltproc, xsltproc)
if test "x$XSLTPROC" = "x"; then
        if test "x$with_docbook" = "xyes"; then
                AC_MSG_ERROR([Docbook support requested, but cannot find xsltproc])
        fi
        with_docbook=no
fi
AM_CONDITIONAL(HAVE_DOCBOOK, test "x$with_docbook" != "xno")

AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])

# Check and set OpenSSL paths
AM_PATH_OPENSSL

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S

# Checks for libraries.
AC_CHECK_LIB(pam, pam_get_item, , AC_MSG_ERROR(could not locate pam libraries))
# AC_CHECK_LIB(crypto, X509_verify_cert, , AC_MSG_ERROR(could not locate OpenSSL crypto library))
if test "$USE_CURL" != "1"; then
AC_CHECK_LIB(ldap, ldap_init, , AC_MSG_ERROR(could not locate ldap library))
else
AC_CHECK_LIB(curl, curl_easy_init, , AC_MSG_ERROR(could not locate cURL library)) 
fi

# add our compiled static libraries
AC_SUBST(LIBSCCONF)
LIBSCCONF="\${top_builddir}/src/scconf/libscconf.la"
AC_SUBST(LIBCOMMON)
LIBCOMMON="\${top_builddir}/src/common/libcommon.la"

#AC_CHECK_LIB(scconf, scconf_new, COMPILE_SCCONF="no",COMPILE_SCCONF="yes")
#if test "x$COMPILE_SCCONF" = "xyes" ; then
#	LIBSCCONF="\${top_builddir}/src/scconf/libscconf.la"
#else
#	LIBSCCONF="-lscconf"
#fi
#AM_CONDITIONAL(MAKE_SCCONF,test "x$COMPILE_SCCONF" = "xyes")

AC_SUBST(PAM_PKCS11)
PAM_PKCS11="\${top_builddir}/src/pam_pkcs11/pam_pkcs11.la"

# AC_SUBST(COMMON_OBJS)
# COMMON_OBJS="\${top_builddir}/src/common/debug.o \${top_builddir}/src/common/error.o"

PCSC_MSG=no
pcsc_path=/usr
AC_SUBST(PCSC_CFLAGS)
AC_SUBST(PCSC_LIBS)

case "$host" in
*-*-darwin*)
	PCSC_MSG=yes
	PCSC_CFLAGS=""
	PCSC_LIBS="-Wl,-framework,PCSC"
	;;
esac

saved_LIBS="$LIBS"
saved_CFLAGS="$CFLAGS"
saved_LDFLAGS="$LDFLAGS"
saved_CPPFLAGS="$CPPFLAGS"
AC_ARG_WITH(pcsclite,
	[  --with-pcsclite=PATH    use PC/SC Lite in PATH],
	[pcsc_path=$withval])
if test "x$pcsc_path" = "xno"; then
	PCSC_MSG="no"
fi
if test "x$pcsc_path" != "xno" -a "x$PCSC_MSG" != "xyes"; then
	PKG_CHECK_MODULES(PCSC, libpcsclite, [
		PCSC_MSG="yes"
		AC_MSG_RESULT($PCSC_MSG)
		],[
	AC_MSG_CHECKING(for PC/SC Lite support (old style))
	for pcscdir in "" /PCSC; do
		CPPFLAGS="$saved_CPPFLAGS"
		LDFLAGS="$saved_LDFLAGS"
		LIBS="-lpcsclite $saved_LIBS"
		PCSC_CFLAGS=""

		for pcsc_libdir in $pcsc_path/lib$pcscdir \
			      $pcsc_path$pcscdir/lib \
			      $pcsc_path$pcscdir; do
			if test -d $pcsc_libdir; then
				if test -n "${need_dash_r}"; then
					LDFLAGS="-R${pcsc_libdir}/ ${LDFLAGS}"
				fi
				LDFLAGS="-L${pcsc_libdir} ${LDFLAGS}"
			fi
		done

		for pcsc_incdir in $pcsc_path/include$pcscdir \
			      $pcsc_path$pcscdir/include \
			      $pcsc_path$pcscdir; do
		      if test -d $pcsc_incdir; then
				PCSC_CFLAGS="-I${pcsc_incdir}"
				break;
		      fi
		done

		CPPFLAGS="${PCSC_CFLAGS} ${CPPFLAGS}"
		AC_TRY_LINK([#include <stdlib.h>
#include <winscard.h>],[SCardEstablishContext(0, NULL, NULL, NULL);], ac_cv_lib_pcsclite_SCardEstablishContext=yes)
		if test "x$ac_cv_lib_pcsclite_SCardEstablishContext" = "xyes"; then
			PCSC_MSG=yes
			break;
		fi
		CPPFLAGS="$saved_CPPFLAGS"
		LDFLAGS="$saved_LDFLAGS"
		LIBS="$saved_LIBS"
		PCSC_CFLAGS=""
	done
	AC_MSG_RESULT($PCSC_MSG)
	if test "x$PCSC_MSG" = "xyes" ; then
		PCSC_LIBS="-lpcsclite"
		CPPFLAGS="$saved_CPPFLAGS"
		LIBS="$saved_LIBS"
	fi
	])
fi
AM_CONDITIONAL(HAVE_PCSC, test "x$PCSC_MSG" = "xyes")
if test "x$PCSC_MSG" = "xyes"; then
	AC_DEFINE(HAVE_PCSC, 1, [Have PC/SC implementation])
else
	PCSC_LIBS=""
	PCSC_CFLAGS=""
fi

if test "x$PCSC_MSG" = "xyes"; then
	CPPFLAGS="${PCSC_CFLAGS} $saved_CPPFLAGS"
	CFLAGS="$PCSC_CFLAGS $saved_CFLAGS"
	LIBS="$PCSC_LIBS $saved_LIBS"
	AC_TRY_LINK([
#include <stdlib.h>
#ifdef __APPLE__
#include <PCSC/wintypes.h>
#include <PCSC/winscard.h>
#else
#include <winscard.h>
#endif
	], [
SCardControl(NULL, NULL, 0, NULL, NULL);
	], [
		AC_DEFINE(HAVE_PCSC_OLD, 1, [old version of pc/sc-lite])
	])
	CPPFLAGS="$saved_CPPFLAGS"
	CFLAGS="$saved_CFLAGS"
	LIBS="$saved_LIBS"
fi

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([string.h syslog.h fcntl.h unistd.h])
if test "$USE_CURL" != "1"; then
AC_CHECK_HEADERS([ldap.h])
else
AC_CHECK_HEADERS([curl/curl.h])
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset strdup strerror])


AC_CONFIG_FILES([ 
Makefile
aclocal/Makefile
docs/Makefile
etc/Makefile
src/Makefile
src/scconf/Makefile
src/common/Makefile
src/tools/Makefile
src/mappers/Makefile
src/pam_pkcs11/Makefile
tools/Makefile
])
AC_OUTPUT
